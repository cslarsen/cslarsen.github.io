<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Christian Stigen Larsen - Articles</title>
		<description>Personal homepage with posts mainly on programming</description>
		<link>https://csl.name</link>
		<atom:link href="https://csl.name/feed.articles.xml" rel="self" type="application/rss+xml" />
		
			
			<item>
				<title>JIT compiling a subset of Python to x86-64</title>
				
					<description>&lt;p&gt;This post shows how to write a basic JIT compiler for the Python bytecode,
using nothing but stock Python modules.&lt;/p&gt;
</description>
				
				<pubDate>Thu, 16 Nov 2017 19:52:12 +0000</pubDate>
				<link>https://csl.name/post/python-compiler/</link>
				<guid isPermaLink="true">https://csl.name/post/python-compiler/</guid>
			</item>
			
		
			
			<item>
				<title>Writing a basic x86-64 JIT compiler from scratch in stock Python</title>
				
					<description>&lt;p&gt;In this post I&amp;#39;ll show how to write a rudimentary, native x86-64 &lt;a href=&quot;https://en.wikipedia.org/wiki/Just-in-time_compilation&quot;&gt;just-in-time
compiler (JIT)&lt;/a&gt; in CPython, using only the built-in modules.&lt;/p&gt;
</description>
				
				<pubDate>Wed, 08 Nov 2017 21:03:00 +0000</pubDate>
				<link>https://csl.name/post/python-jit/</link>
				<guid isPermaLink="true">https://csl.name/post/python-jit/</guid>
			</item>
			
		
			
			<item>
				<title>Embedding binary data in executables</title>
				
					<description>&lt;p&gt;Applications usually load resources like images from disk. But, in some
situations, it may be better to embed binary data right into the executable
file. Here are a few ways to do that.&lt;/p&gt;
</description>
				
				<pubDate>Tue, 07 Jun 2016 23:45:40 +0000</pubDate>
				<link>https://csl.name/post/embedding-binary-data/</link>
				<guid isPermaLink="true">https://csl.name/post/embedding-binary-data/</guid>
			</item>
			
		
			
			<item>
				<title>Sending raw Ethernet frames from Python</title>
				
					<description>&lt;p&gt;Sometimes you just &lt;em&gt;need&lt;/em&gt; to send raw Ethernet frames directly on the network.
Seriously, it has its uses: Perhaps you&amp;#39;re constructing your own non-IP network
for research or performance, you need to interface with some weird device on
the local network, or you&amp;#39;re just playing around for fun.  I used it
extensively while researching use of &lt;a
href=&quot;https://en.wikipedia.org/wiki/OpenFlow&quot;&gt;OpenFlow&lt;/a&gt; with &lt;a
href=&quot;http://mininet.org&quot;&gt;Mininet&lt;/a&gt;.&lt;/p&gt;
</description>
				
				<pubDate>Mon, 06 Jun 2016 22:30:30 +0000</pubDate>
				<link>https://csl.name/post/raw-ethernet-frames/</link>
				<guid isPermaLink="true">https://csl.name/post/raw-ethernet-frames/</guid>
			</item>
			
		
			
			<item>
				<title>How GCC fixes bad hand-optimizations</title>
				
					<description>&lt;p&gt;The GCC and LLVM optimizers contain &lt;a
href=&quot;http://www.fefe.de/source-code-optimization.pdf&quot;&gt;troves of arcane and
esoteric tricks&lt;/a&gt; to speed up code on different systems. Rather surprisingly,
GCC will even correct bad hand-optimizations!&lt;/p&gt;
</description>
				
				<pubDate>Sat, 04 Jun 2016 23:00:24 +0000</pubDate>
				<link>https://csl.name/post/gcc-optimization-fix/</link>
				<guid isPermaLink="true">https://csl.name/post/gcc-optimization-fix/</guid>
			</item>
			
		
			
			<item>
				<title>Writing a shared C++ library and loading it in LuaJIT</title>
				
					<description>&lt;p&gt;This tutorial shows how to create a shared library in C and C++, and how to
load it in &lt;a href=&quot;http://luajit.org&quot;&gt;LuaJIT&lt;/a&gt; using its foreign-function interface (FFI).
The code here is &lt;a href=&quot;https://github.com/cslarsen/luajit-cpp&quot;&gt;available on GitHub&lt;/a&gt;.&lt;/p&gt;
</description>
				
				<pubDate>Sun, 15 May 2016 05:25:47 +0000</pubDate>
				<link>https://csl.name/post/luajit-cpp/</link>
				<guid isPermaLink="true">https://csl.name/post/luajit-cpp/</guid>
			</item>
			
		
			
			<item>
				<title>Lambdas, macros and continuations in Scheme — a tutorial</title>
				
					<description>&lt;p class=&quot;lead&quot;&gt;
I gave an &lt;a href=&quot;https://speakerdeck.com/csl/r7rs-scheme&quot;&gt;introductory talk
on R&lt;sup&gt;7&lt;/sup&gt;RS Scheme&lt;/a&gt; in 2013 that included some neat examples using
closures, continuations and macros. This article expands on that, intended for
anyone curious about those concepts.
&lt;/p&gt;
</description>
				
				<pubDate>Sat, 07 May 2016 07:30:18 +0000</pubDate>
				<link>https://csl.name/post/lambda-macros-continuations/</link>
				<guid isPermaLink="true">https://csl.name/post/lambda-macros-continuations/</guid>
			</item>
			
		
			
			<item>
				<title>Commodore 64 assembly coding on the command line</title>
				
					<description>&lt;p class=&quot;lead&quot;&gt;
Have you ever had this nagging feeling that you're less worth because you never
actually coded assembly on the C64? Of course you have! Fortunately, here's how
you can finally do something about it, using the OS X or Linux command line.
&lt;/p&gt;
</description>
				
				<pubDate>Fri, 06 May 2016 21:37:13 +0000</pubDate>
				<link>https://csl.name/post/c64-coding/</link>
				<guid isPermaLink="true">https://csl.name/post/c64-coding/</guid>
			</item>
			
		
			
			<item>
				<title>Imputing the presence of the HLA-B27 antigen using your 23andMe genome</title>
				
					<description>&lt;p class=&quot;lead&quot;&gt;
Recently, I wanted to see if I could &lt;a
href=&quot;https://en.wikipedia.org/wiki/Imputation_(genetics)&quot;&gt;impute&lt;/a&gt; the
presence of the &lt;a href=&quot;https://en.wikipedia.org/wiki/HLA-B27&quot;&gt;HLA-B27
antigen&lt;/a&gt; using my raw 23andMe DNA data. This is a pretty important antigen,
because it is associated with several diseases. Although I used a very
small reference data set, I managed to get a rough result that happened to
coincide with a blood test.
&lt;/p&gt;
</description>
				
				<pubDate>Tue, 23 Feb 2016 21:18:00 +0000</pubDate>
				<link>https://csl.name/post/hla-b27/</link>
				<guid isPermaLink="true">https://csl.name/post/hla-b27/</guid>
			</item>
			
		
			
			<item>
				<title>Using GNU Global with C++ and Git</title>
				
					<description>&lt;p class=&quot;lead&quot;&gt;
&lt;a href=&quot;https://www.gnu.org/software/global/&quot;&gt;GNU global&lt;/a&gt; is a very
compelling way to quickly search your project from the command line.  Here I
show how to index your code and update it automatically when using git.
&lt;/p&gt;
</description>
				
				<pubDate>Tue, 23 Feb 2016 19:19:20 +0000</pubDate>
				<link>https://csl.name/post/gtags/</link>
				<guid isPermaLink="true">https://csl.name/post/gtags/</guid>
			</item>
			
		
			
			<item>
				<title>Adding a TLS certificate to your NearlyFreeSpeech site</title>
				
					<description>&lt;p&gt;I recently had to renew the TLS certificate on &lt;a href=&quot;https://csl.name&quot;&gt;csl.name&lt;/a&gt;,
which is hosted on &lt;a href=&quot;https://www.nearlyfreespeech.net&quot;&gt;NearlyFreeSpeech (NFSN)&lt;/a&gt;.
But I had forgotten how to. So I decided to post a &lt;a href=&quot;https://www.mc-guinness.co.uk/blog/20150710/set-up-https-ssl-tls-encryption-access-to-nearlyfreespeech-hosted-sites/&quot;&gt;condensed version of the
steps found here&lt;/a&gt; on my own site.&lt;/p&gt;
</description>
				
				<pubDate>Sat, 23 Jan 2016 21:54:29 +0000</pubDate>
				<link>https://csl.name/post/tls-nfsn/</link>
				<guid isPermaLink="true">https://csl.name/post/tls-nfsn/</guid>
			</item>
			
		
			
			<item>
				<title>Making a simple virtual machine interpreter in Python</title>
				
					<description>&lt;p&gt;&lt;p class=&quot;lead&quot;&gt;&lt;/p&gt;
</description>
				
				<pubDate>Wed, 28 Jan 2015 20:59:50 +0000</pubDate>
				<link>https://csl.name/post/vm/</link>
				<guid isPermaLink="true">https://csl.name/post/vm/</guid>
			</item>
			
		
			
			<item>
				<title>Compiling and using em-dosbox</title>
				
					<description>&lt;p&gt;Archive.org has released a &lt;a href=&quot;https://archive.org/details/softwarelibrary_msdos_games/v2&quot;&gt;large number of MS-DOS
games&lt;/a&gt; that can be
played in the browser using
&lt;a href=&quot;https://github.com/dreamlayers/em-dosbox&quot;&gt;em-dosbox&lt;/a&gt;.  Here I&amp;#39;ll show you how
you can compile em-dosbox and put up your own MS-DOS programs on the web.  This
guide assumes you&amp;#39;re using Mac OS X and &lt;a href=&quot;http://brew.sh&quot;&gt;Homebrew&lt;/a&gt;, but should be
informative for other UNIX users as well.&lt;/p&gt;
</description>
				
				<pubDate>Thu, 22 Jan 2015 21:08:00 +0000</pubDate>
				<link>https://csl.name/post/em-dosbox/</link>
				<guid isPermaLink="true">https://csl.name/post/em-dosbox/</guid>
			</item>
			
		
			
			<item>
				<title>A Short R⁷RS Scheme Tutorial</title>
				
					<description>&lt;p&gt;This is a &lt;em&gt;work-in-progress&lt;/em&gt; introduction to the Scheme programming
language. Specifically, it&amp;#39;s aimed at the latest version, R⁷RS.
This little tutorial will be updated in the time ahead, so be sure to post
comments so I know what needs to be done!&lt;/p&gt;
</description>
				
				<pubDate>Thu, 01 Jan 2015 10:58:04 +0000</pubDate>
				<link>https://csl.name/post/scheme-tutorial/</link>
				<guid isPermaLink="true">https://csl.name/post/scheme-tutorial/</guid>
			</item>
			
		
			
			<item>
				<title>Building Qt apps on the command line</title>
				
					<description>&lt;p&gt;Most Qt tutorials seem to assume you want to use Qt Creator.  This shows you
how to build Qt apps on the command line, meaning you can experiment much
quicker while feeling that you&amp;#39;re in control.&lt;/p&gt;
</description>
				
				<pubDate>Sun, 25 Nov 2012 00:00:00 +0000</pubDate>
				<link>https://csl.name/post/qt-gcc/</link>
				<guid isPermaLink="true">https://csl.name/post/qt-gcc/</guid>
			</item>
			
		
			
			<item>
				<title>Rendering the Mandelbrot Set</title>
				
					<description>&lt;p&gt;In 2012, I made a &lt;a href=&quot;https://csl.name/mandelbrot/&quot;&gt;Mandelbrot renderer in
JavaScript&lt;/a&gt;. Here I will explain how you can do it yourself, including how
to implement smooth coloring and making it fast.&lt;/p&gt;
</description>
				
				<pubDate>Wed, 22 Feb 2012 00:00:00 +0000</pubDate>
				<link>https://csl.name/post/mandelbrot-rendering/</link>
				<guid isPermaLink="true">https://csl.name/post/mandelbrot-rendering/</guid>
			</item>
			
		
			
			<item>
				<title>Two quines in C</title>
				
					<description>&lt;p&gt;A quine is a program that, when run, produces an exact copy of its original
source code.&lt;/p&gt;
</description>
				
				<pubDate>Sat, 24 Dec 2011 11:35:05 +0000</pubDate>
				<link>https://csl.name/post/two-quines/</link>
				<guid isPermaLink="true">https://csl.name/post/two-quines/</guid>
			</item>
			
		
			
			<item>
				<title>Palindromes in The Gettysburg Address and Shakespeare&amp;apos;s collected works</title>
				
					<description>&lt;p&gt;Some years ago, I &lt;a href=&quot;https://gist.github.com/cslarsen/851611&quot;&gt;solved some programming puzzles&lt;/a&gt; posted by Greplin (later
Cue, then acquired by Apple).&lt;/p&gt;
</description>
				
				<pubDate>Thu, 03 Mar 2011 17:10:27 +0000</pubDate>
				<link>https://csl.name/post/palindromes-gettysburg-shakespeare/</link>
				<guid isPermaLink="true">https://csl.name/post/palindromes-gettysburg-shakespeare/</guid>
			</item>
			
		
			
			<item>
				<title>A UDP syslog client in Python</title>
				
					<description>&lt;p&gt;While the Python standard library offers a &lt;a href=&quot;http://docs.python.org/2/library/syslog.html&quot;&gt;syslog&lt;/a&gt; module,
it seem to be a wrapper around the &lt;a href=&quot;http://pubs.opengroup.org/onlinepubs/007904975/basedefs/syslog.h.html&quot;&gt;POSIX syslog system
calls&lt;/a&gt;. This means you cannot use it to send syslog messages
over the network.&lt;/p&gt;
</description>
				
				<pubDate>Fri, 14 Nov 2008 09:53:22 +0000</pubDate>
				<link>https://csl.name/post/python-syslog-client/</link>
				<guid isPermaLink="true">https://csl.name/post/python-syslog-client/</guid>
			</item>
			
		
			
			<item>
				<title>Einstein's problem and a solution by elimination</title>
				
					<description>&lt;p&gt;&lt;p class=&quot;lead&quot;&gt;
The &lt;a href=&quot;https://en.wikipedia.org/wiki/Zebra_Puzzle&quot;&gt;Zebra Puzzle&lt;/a&gt; is a
famous puzzle that has been said to have been invented by Einstein. It is not.
Neither is it true that only 2% of people can solve it. But it &lt;em&gt;is&lt;/em&gt; a very fun
puzzle and I invite everyone to try to solve it on their own.&lt;/p&gt;
</description>
				
				<pubDate>Tue, 01 Jan 2008 00:00:00 +0000</pubDate>
				<link>https://csl.name/post/einsteins-puzzle/</link>
				<guid isPermaLink="true">https://csl.name/post/einsteins-puzzle/</guid>
			</item>
			
		
			
			<item>
				<title>Using Lua with C++</title>
				
					<description>&lt;p&gt;In this short tutorial I&amp;#39;ll show how to run Lua programs from C and C++ and how
to expose functions to them. It&amp;#39;s easy!&lt;/p&gt;
</description>
				
				<pubDate>Fri, 20 Oct 2006 19:42:24 +0000</pubDate>
				<link>https://csl.name/post/lua-and-cpp/</link>
				<guid isPermaLink="true">https://csl.name/post/lua-and-cpp/</guid>
			</item>
			
		
			
			<item>
				<title>Calling C functions from Python</title>
				
					<description>&lt;p&gt;Here&amp;#39;s a small tutorial on how to call your C functions from Python.&lt;/p&gt;
</description>
				
				<pubDate>Tue, 28 Mar 2006 00:00:00 +0000</pubDate>
				<link>https://csl.name/post/c-functions-python/</link>
				<guid isPermaLink="true">https://csl.name/post/c-functions-python/</guid>
			</item>
			
		
	</channel>
</rss>
